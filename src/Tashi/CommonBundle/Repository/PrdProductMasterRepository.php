<?php
namespace Tashi\CommonBundle\Repository;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\Expr;

/**
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PrdProductMasterRepository extends EntityRepository
{
    public function findAllActiveProductsByCategory($catid){
        $em = $this->getEntityManager();
        $query = $em->createQuery(" 
                                SELECT p                                   
                                FROM 
                                    TashiCommonBundle:PrdProductMaster p
                                INNER JOIN
                                    p.productCategory c
                                WHERE 
                                    p.recordActiveFlag!=0
                                AND
                                    c.pkid='".$catid."'
                                ORDER BY
                                    p.productName");  
        return $query->getResult();
    }
    public function findProductsByName($name){
        $em = $this->getEntityManager();
        $query = $em->createQuery(" 
                                SELECT p                                   
                                FROM 
                                    TashiCommonBundle:PrdProductMaster p
                                WHERE
                                    p.productName like '%".$name."%'
                                AND
                                    p.recordActiveFlag=1                                   
                                ORDER BY
                                    p.productName");  
        return $query->getResult();
    }    
    public function findprodByAnyCondition($keyword, $parameterValues)
      {  
        
        // $em instanceof EntityManager
        $em = $this->getEntityManager();
        $query = $em->createQuery(" 
                                SELECT
                                    p.productCode productCode, p.productName productName, p.pkid pkid,
                                    p.statusFlag statusFlag, pp.pkid ppkid, pp.retailerPrice retailerPrice,
                                    pp.wholesalePrice wholesalePrice, pc.categoryName categoryName
                                FROM 
                                    TashiCommonBundle:PrdProductMaster p, 
                                    TashiCommonBundle:PrdProductPriceTxn pp,
                                    TashiCommonBundle:PrdProductCategoryMaster pc
                                WHERE 
                                        p.pkid = pp.product
                                AND     p.productCategory=pc.pkid
                                  AND ".$keyword)->setParameters($parameterValues);
        
    
        return $query->getResult();
     } 
     public function findprodstatusFlag($keyword, $parameterValues)
      {  
        
        // $em instanceof EntityManager
        $em = $this->getEntityManager();
        $query = $em->createQuery(" 
                                SELECT
                                    p.productCode productCode, p.productName productName, p.pkid pkid,
                                    p.statusFlag statusFlag, pp.pkid ppkid, pp.retailerPrice retailerPrice,
                                    pp.wholesalePrice wholesalePrice, pc.categoryName categoryName
                                FROM 
                                    TashiCommonBundle:PrdProductMaster p, 
                                    TashiCommonBundle:PrdProductPriceTxn pp,
                                    TashiCommonBundle:PrdProductCategoryMaster pc
                                WHERE 
                                    p.pkid = pp.product
                                AND p.productCategory=pc.pkid
                                  AND ".$keyword)->setParameters($parameterValues);
        
    
        return $query->getResult();
      }
      public function findprodStockByAnyCondition($keyword, $parameterValues)
      {  
        
        // $em instanceof EntityManager
        $em = $this->getEntityManager();
        $query = $em->createQuery(" 
                                SELECT
                                    p.productCode productCode, p.productName productName, p.pkid pkid,
                                    p.statusFlag statusFlag, pp.pkid ppkid, pp.retailerPrice retailerPrice,
                                    pp.wholesalePrice wholesalePrice, pc.categoryName categoryName, s.quantity
                                    quantity, s.expiryDate expiryDate, date_diff(s.expiryDate,CURRENT_DATE()) time_remaining,
                                    s.pkid spkid, s.recordUpdateDate insertdate
                                FROM 
                                    TashiCommonBundle:PrdProductMaster p, 
                                    TashiCommonBundle:PrdProductPriceTxn pp,
                                    TashiCommonBundle:PrdProductCategoryMaster pc,
                                    TashiCommonBundle:StockMaster s
                                WHERE 
                                        p.pkid = pp.product
                                AND     p.productCategory=pc.pkid
                                AND     p.pkid=s.producMater
                                AND ".$keyword)->setParameters($parameterValues);
        
    
        return $query->getResult();
     } 
     /***********for used in orderservice.php***********please do not delete*/
     public function getProductByPCode($pcode){
         $em=$this->getEntityManager();
        $qb=$em->createQueryBuilder();
        $qb->select('pr')
                ->from('TashiCommonBundle:PrdProductPriceTxn','pr')
                ->join('pr.product','prd')                
                ->where($qb->expr()->andX(
                        $qb->expr()->eq('prd.productCode','\''.$pcode.'\''),
                        $qb->expr()->eq('prd.statusFlag',1),
                        $qb->expr()->eq('prd.recordActiveFlag',1),
                        $qb->expr()->eq('pr.statusFlag',1),
                        $qb->expr()->eq('pr.recordActiveFlag',1)
                        ));
        $query=$qb->getQuery();
        return $query->getResult();
     }
     public function GetServicesByProductCategory($categoryid){
        try{        
            $em = $this->getEntityManager(); 
            $query = $em->createQuery(
                    " SELECT service                             
                      FROM TashiCommonBundle:PrdServiceTxn service                           
                      INNER JOIN service.productFk prod
                      INNER JOIN prod.productCategory cat                      
                      WHERE  cat.pkid=".$categoryid." AND
                      cat.recordActiveFlag=1 AND service.recordActiveFlag=1 AND prod.recordActiveFlag=1");    
        }catch (\Exception $ex){
            throw new \Exception($ex->getMessage());
        }
        return $query->getResult();
    }
    public function SearchAllProduct(){
        $em=$this->getEntityManager();
        $qb=$em->createQueryBuilder();
        $qb->select('price')
                ->from('TashiCommonBundle:PrdProductPriceTxn', 'price')
                ->join('price.product','prod')                
                ->where($qb->expr()->andX(
                        $qb->expr()->eq('prod.recordActiveFlag', 1),
                        $qb->expr()->eq('price.recordActiveFlag', 1)
                        ))
                ->orderBy('prod.productName','ASC');
        $query=$qb->getQuery();
        return $query->getResult();
    }

    public function SearchProductByCategory($category){
        $em=$this->getEntityManager();
        $qb=$em->createQueryBuilder();
        $qb->select('price')
                ->from('TashiCommonBundle:PrdProductPriceTxn', 'price')
                ->join('price.product','prod')
                ->join('prod.productCategory','cat')
                ->where($qb->expr()->andX(
                        $qb->expr()->eq('cat.pkid',$category),
                        $qb->expr()->eq('prod.recordActiveFlag', 1),
                        $qb->expr()->eq('price.recordActiveFlag', 1)
                        ))
                ->orderBy('prod.productName','ASC');
        $query=$qb->getQuery();
        return $query->getResult();
    }
    public function SearchProductBySupplier($supplierid){
        $em=$this->getEntityManager();
        $qb=$em->createQueryBuilder();
        $qb->select('price')
                ->from('TashiCommonBundle:PrdProductPriceTxn', 'price')                
                ->join('price.product','prod')
                ->join('TashiCommonBundle:SupplierProductTxn','supprodtxn',
                Expr\Join::WITH,$qb->expr()->eq('prod.pkid','supprodtxn.productFk'))
                ->join('supprodtxn.supplierFk','supplier')
                ->where($qb->expr()->andX(
                        $qb->expr()->eq('supplier.supplierPk',$supplierid),
                        $qb->expr()->eq('prod.recordActiveFlag', 1),
                        $qb->expr()->eq('supplier.recordActiveFlag', 1),
                        $qb->expr()->eq('price.recordActiveFlag', 1)
                        ))
                ->orderBy('prod.productName','ASC');
        $query=$qb->getQuery();
        return $query->getResult();
    }
    public function SearchProductByCodeName($keyword){
        $em=$this->getEntityManager();
        $qb=$em->createQueryBuilder();
        $qb->select('price')
                ->from('TashiCommonBundle:PrdProductPriceTxn', 'price')
                ->join('price.product','prod')
                ->where($qb->expr()->orX(
                        $qb->expr()->eq('prod.productCode',$keyword),
                        $qb->expr()->like('prod.productName','\'%'.$keyword.'%\'')
                        ))
                ->andWhere($qb->expr()->eq('prod.recordActiveFlag', 1),
                        $qb->expr()->eq('price.recordActiveFlag', 1))
                ->orderBy('prod.productName','ASC');
        $query=$qb->getQuery();
        return $query->getResult();
    }
    public function SearchProductByManufacturer($keyword){
        $em=$this->getEntityManager();
        $qb=$em->createQueryBuilder();
        $qb->select('price')
                ->from('TashiCommonBundle:PrdProductPriceTxn', 'price')
                ->join('price.product','prod')
                ->where($qb->expr()->andX(
                        $qb->expr()->like('prod.manufacturer','\'%'.$keyword.'%\''),
                        $qb->expr()->eq('prod.recordActiveFlag', 1),
                        $qb->expr()->eq('price.recordActiveFlag', 1)
                        ))
                ->orderBy('prod.productName','ASC');
        $query=$qb->getQuery();
        return $query->getResult();
    }
    public function SearchProductsByEntryDate($date){
        $em = $this->getEntityManager();
        $newdate=new \DateTime($date); 
        $qb=$em->createQueryBuilder();
        $qb->select('price')
                ->from('TashiCommonBundle:PrdProductPriceTxn', 'price')
                ->join('price.product','prod')
                ->where($qb->expr()->andX(
                        $qb->expr()->eq('prod.recordInsertDate','\'%'.date_format($newdate,'Y-m-d').'%\''),
                        $qb->expr()->eq('prod.recordActiveFlag', 1),
                        $qb->expr()->eq('price.recordActiveFlag', 1)
                        ))
                ->orderBy('prod.productName','ASC');
        $query=$qb->getQuery();
        return $query->getResult();  
    }
}
